package com.example.myapplication;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Path;
import android.os.Bundle;
import android.util.Log;
import android.widget.ImageView;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.PathParser;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Load the image as a Bitmap
        Bitmap originalBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.internet);

        // Define the dimensions of the path
        float pathWidth = dpToPx(200); // Convert 200dp to pixels
        float pathHeight = dpToPx(200); // Convert 200dp to pixels

        // Calculate the scaling factor to fit the image inside the path
        float scaleX = pathWidth / originalBitmap.getWidth();
        float scaleY = pathHeight / originalBitmap.getHeight();
        float scale = Math.min(scaleX, scaleY);

        // Create a matrix for scaling the image
        Matrix imageMatrix = new Matrix();
        imageMatrix.postScale(scale, scale);

        // Create the scaled bitmap
        Bitmap scaledBitmap = Bitmap.createBitmap(originalBitmap, 0, 0, originalBitmap.getWidth(), originalBitmap.getHeight(), imageMatrix, true);

        // Parse the path data from the string resource
        String vectorPathData = getResources().getString(R.string.vector_path_data);
        Path path = PathParser.createPathFromPathData(vectorPathData);

        // Scale the path to the desired size
        Matrix pathMatrix = new Matrix();
        pathMatrix.postScale(pathWidth / 200, pathHeight / 200); // Scale path to the desired dimensions
        path.transform(pathMatrix);

        // Create a mutable Bitmap to draw the masked image
        Bitmap maskedBitmap = Bitmap.createBitmap((int) pathWidth, (int) pathHeight, Bitmap.Config.ARGB_8888);

        // Create a Canvas to draw on the mutable Bitmap
        Canvas canvas = new Canvas(maskedBitmap);

        // Create a Paint object for the mask
        Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);

        // Clip the canvas with the path
        canvas.save();
        canvas.clipPath(path);

        // Calculate the position to center the scaled bitmap in the path
        float dx = (pathWidth - scaledBitmap.getWidth()) / 2;
        float dy = (pathHeight - scaledBitmap.getHeight()) / 2;

        // Draw the scaled image onto the canvas, which is now clipped to the path
        canvas.drawBitmap(scaledBitmap, dx, dy, paint);
        canvas.restore();

        // Set the masked Bitmap to an ImageView
        ImageView imageView = findViewById(R.id.imageView);
        imageView.setImageBitmap(maskedBitmap);

        Log.d("BitmapInfo", "Original Bitmap Width: " + originalBitmap.getWidth() + ", Height: " + originalBitmap.getHeight());
        Log.d("BitmapInfo", "Masked Bitmap Width: " + maskedBitmap.getWidth() + ", Height: " + maskedBitmap.getHeight());
    }

    private float dpToPx(float dp) {
        return dp * getResources().getDisplayMetrics().density;
    }
}
